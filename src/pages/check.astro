---
import { CheckIcon, XIcon } from "lucide-react";
import Root from "../layouts/root.astro";
---

<Root lang="it" title="Controllo internet">
    <h1 class="text-4xl text-center font-bold mb-4">Controllo del blocco internet</h1>
    <div id="loading">
        <div class="text-2xl text-center flex flex-col justify-center items-center gap-3 grow">
            <div>Controllo in corso...</div>
            <div class="loading loading-spinner" />
        </div>
    </div>
    <div id="success" class="hidden">
        <div class="text-2xl flex justify-center gap-2 text-success">
            <CheckIcon size={32} /> Il test è stato superato.
        </div>
        <div>
            Internet è stato <strong>con molta probabilità</strong> bloccato correttamente.
            <br>
            Vi invitiamo a fare anche qualche prova a mano (ansa.it, youtube.com, etc) per avere più sicurezza.
        </div>
    </div>
    <div id="failed" class="hidden">
        <div class="text-2xl flex justify-center gap-2 text-error mb-2">
            <XIcon size={32} /> Il test non è stato superato.
        </div>
        <div>
            Per bloccare internet correttamente consulta la <strong>guida ufficiale</strong>
            al seguente indirizzo:
            <br>
            <a href="/resources/guida.pdf" target="_blank" class="link
            link-info">https://gara.squadre.olinfo.it/resources/guida.pdf</a>
        </div>
    </div>
    <div id="debug" class="text-xs text-gray-600 mt-4">debug: </div>
</Root>

<script is:inline>

const TESTS = [
    ["https://jsonplaceholder.typicode.com/posts/1", "sunt aut facere repellat", false],
    ["https://dummyjson.com/recipes", "mozzarella", false],
    ["https://reqres.in/api/users", "george.bluth", false],
    ["https://training.olinfo.it/ping", "pong", false],
    ["https://gara.squadre.olinfo.it/ping", "pong", true],
];

async function urlContainsValue([url, value]) {
    try {
        const [resp] = await Promise.all([
            fetch(`${url}?t=${Date.now()}`, {
                signal: AbortSignal.timeout(15000),
                cache: "no-store",
            }),
            new Promise((resolve) => setTimeout(resolve, 1000)),
        ]);
        if (!resp.ok) return false;
        const text = await resp.text();
        return text.includes(value);
    } catch {
        return false;
    }
}

function isGood(element, index) {
    const good = (element === TESTS[index][2]);
    document.getElementById("debug").innerHTML += (good ? '+' : '-') + (index + 1);
    return good;
}

async function test() {
    const results = (await Promise.all(TESTS.map(urlContainsValue))).map(isGood);

    if (results.every((value => value === true))) {
        document.getElementById("success").classList.remove("hidden");
    } else {
        document.getElementById("failed").classList.remove("hidden");
    }

    document.getElementById("loading").classList.add("hidden");
}

test();

</script>
